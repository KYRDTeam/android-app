// Generated by Dagger (https://google.github.io/dagger).
package com.kyberswap.android.util.di.module;

import android.app.Application;
import com.kyberswap.android.data.repository.datasource.local.AppDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DatabaseModule_ProvideDatabaseFactory implements Factory<AppDatabase> {
  private final DatabaseModule module;

  private final Provider<Application> appProvider;

  public DatabaseModule_ProvideDatabaseFactory(
      DatabaseModule module, Provider<Application> appProvider) {
    this.module = module;
    this.appProvider = appProvider;
  }

  @Override
  public AppDatabase get() {
    return provideInstance(module, appProvider);
  }

  public static AppDatabase provideInstance(
      DatabaseModule module, Provider<Application> appProvider) {
    return proxyProvideDatabase(module, appProvider.get());
  }

  public static DatabaseModule_ProvideDatabaseFactory create(
      DatabaseModule module, Provider<Application> appProvider) {
    return new DatabaseModule_ProvideDatabaseFactory(module, appProvider);
  }

  public static AppDatabase proxyProvideDatabase(DatabaseModule instance, Application app) {
    return Preconditions.checkNotNull(
        instance.provideDatabase(app), "Cannot return null from a non-@Nullable @Provides method");
  }
}
