// Generated by Dagger (https://google.github.io/dagger).
package com.kyberswap.android.domain.usecase;

import com.kyberswap.android.domain.SchedulerProvider;
import com.kyberswap.android.domain.repository.FeatureArticleRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class GetFeatureArticlesUseCase_Factory implements Factory<GetFeatureArticlesUseCase> {
  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<FeatureArticleRepository> featureArticleRepositoryProvider;

  public GetFeatureArticlesUseCase_Factory(
      Provider<SchedulerProvider> schedulerProvider,
      Provider<FeatureArticleRepository> featureArticleRepositoryProvider) {
    this.schedulerProvider = schedulerProvider;
    this.featureArticleRepositoryProvider = featureArticleRepositoryProvider;
  }

  @Override
  public GetFeatureArticlesUseCase get() {
    return provideInstance(schedulerProvider, featureArticleRepositoryProvider);
  }

  public static GetFeatureArticlesUseCase provideInstance(
      Provider<SchedulerProvider> schedulerProvider,
      Provider<FeatureArticleRepository> featureArticleRepositoryProvider) {
    return new GetFeatureArticlesUseCase(
        schedulerProvider.get(), featureArticleRepositoryProvider.get());
  }

  public static GetFeatureArticlesUseCase_Factory create(
      Provider<SchedulerProvider> schedulerProvider,
      Provider<FeatureArticleRepository> featureArticleRepositoryProvider) {
    return new GetFeatureArticlesUseCase_Factory(
        schedulerProvider, featureArticleRepositoryProvider);
  }

  public static GetFeatureArticlesUseCase newGetFeatureArticlesUseCase(
      SchedulerProvider schedulerProvider, FeatureArticleRepository featureArticleRepository) {
    return new GetFeatureArticlesUseCase(schedulerProvider, featureArticleRepository);
  }
}
