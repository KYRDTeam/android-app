// Generated by Dagger (https://google.github.io/dagger).
package com.kyberswap.android.util.di.module;

import com.kyberswap.android.data.repository.datasource.storage.StorageMediator;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<StorageMediator> storageMediatorProvider;

  public NetworkModule_ProvideOkHttpClientFactory(
      NetworkModule module, Provider<StorageMediator> storageMediatorProvider) {
    this.module = module;
    this.storageMediatorProvider = storageMediatorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideInstance(module, storageMediatorProvider);
  }

  public static OkHttpClient provideInstance(
      NetworkModule module, Provider<StorageMediator> storageMediatorProvider) {
    return proxyProvideOkHttpClient(module, storageMediatorProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(
      NetworkModule module, Provider<StorageMediator> storageMediatorProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(module, storageMediatorProvider);
  }

  public static OkHttpClient proxyProvideOkHttpClient(
      NetworkModule instance, StorageMediator storageMediator) {
    return Preconditions.checkNotNull(
        instance.provideOkHttpClient(storageMediator),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
