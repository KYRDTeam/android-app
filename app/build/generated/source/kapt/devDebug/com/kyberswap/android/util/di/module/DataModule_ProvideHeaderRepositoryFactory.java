// Generated by Dagger (https://google.github.io/dagger).
package com.kyberswap.android.util.di.module;

import com.kyberswap.android.data.mapper.HeaderMapper;
import com.kyberswap.android.data.repository.datasource.HeaderDataStore;
import com.kyberswap.android.domain.repository.HeaderRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DataModule_ProvideHeaderRepositoryFactory implements Factory<HeaderRepository> {
  private final Provider<HeaderDataStore> localProvider;

  private final Provider<HeaderDataStore> remoteProvider;

  private final Provider<HeaderMapper> mapperProvider;

  public DataModule_ProvideHeaderRepositoryFactory(
      Provider<HeaderDataStore> localProvider,
      Provider<HeaderDataStore> remoteProvider,
      Provider<HeaderMapper> mapperProvider) {
    this.localProvider = localProvider;
    this.remoteProvider = remoteProvider;
    this.mapperProvider = mapperProvider;
  }

  @Override
  public HeaderRepository get() {
    return provideInstance(localProvider, remoteProvider, mapperProvider);
  }

  public static HeaderRepository provideInstance(
      Provider<HeaderDataStore> localProvider,
      Provider<HeaderDataStore> remoteProvider,
      Provider<HeaderMapper> mapperProvider) {
    return proxyProvideHeaderRepository(
        localProvider.get(), remoteProvider.get(), mapperProvider.get());
  }

  public static DataModule_ProvideHeaderRepositoryFactory create(
      Provider<HeaderDataStore> localProvider,
      Provider<HeaderDataStore> remoteProvider,
      Provider<HeaderMapper> mapperProvider) {
    return new DataModule_ProvideHeaderRepositoryFactory(
        localProvider, remoteProvider, mapperProvider);
  }

  public static HeaderRepository proxyProvideHeaderRepository(
      HeaderDataStore local, HeaderDataStore remote, HeaderMapper mapper) {
    return Preconditions.checkNotNull(
        DataModule.provideHeaderRepository(local, remote, mapper),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
