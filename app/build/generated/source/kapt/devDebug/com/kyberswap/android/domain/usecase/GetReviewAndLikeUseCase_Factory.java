// Generated by Dagger (https://google.github.io/dagger).
package com.kyberswap.android.domain.usecase;

import com.kyberswap.android.domain.SchedulerProvider;
import com.kyberswap.android.domain.repository.HeaderRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class GetReviewAndLikeUseCase_Factory implements Factory<GetReviewAndLikeUseCase> {
  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<HeaderRepository> headersRepositoryProvider;

  public GetReviewAndLikeUseCase_Factory(
      Provider<SchedulerProvider> schedulerProvider,
      Provider<HeaderRepository> headersRepositoryProvider) {
    this.schedulerProvider = schedulerProvider;
    this.headersRepositoryProvider = headersRepositoryProvider;
  }

  @Override
  public GetReviewAndLikeUseCase get() {
    return provideInstance(schedulerProvider, headersRepositoryProvider);
  }

  public static GetReviewAndLikeUseCase provideInstance(
      Provider<SchedulerProvider> schedulerProvider,
      Provider<HeaderRepository> headersRepositoryProvider) {
    return new GetReviewAndLikeUseCase(schedulerProvider.get(), headersRepositoryProvider.get());
  }

  public static GetReviewAndLikeUseCase_Factory create(
      Provider<SchedulerProvider> schedulerProvider,
      Provider<HeaderRepository> headersRepositoryProvider) {
    return new GetReviewAndLikeUseCase_Factory(schedulerProvider, headersRepositoryProvider);
  }

  public static GetReviewAndLikeUseCase newGetReviewAndLikeUseCase(
      SchedulerProvider schedulerProvider, HeaderRepository headersRepository) {
    return new GetReviewAndLikeUseCase(schedulerProvider, headersRepository);
  }
}
