// Generated by Dagger (https://google.github.io/dagger).
package com.kyberswap.android.util.di.module;

import android.content.Context;
import com.kyberswap.android.data.api.home.HomeApi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class NetworkModule_ProvideHomeApiFactory implements Factory<HomeApi> {
  private final NetworkModule module;

  private final Provider<Context> contextProvider;

  private final Provider<OkHttpClient> clientProvider;

  public NetworkModule_ProvideHomeApiFactory(
      NetworkModule module,
      Provider<Context> contextProvider,
      Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public HomeApi get() {
    return provideInstance(module, contextProvider, clientProvider);
  }

  public static HomeApi provideInstance(
      NetworkModule module,
      Provider<Context> contextProvider,
      Provider<OkHttpClient> clientProvider) {
    return proxyProvideHomeApi(module, contextProvider.get(), clientProvider.get());
  }

  public static NetworkModule_ProvideHomeApiFactory create(
      NetworkModule module,
      Provider<Context> contextProvider,
      Provider<OkHttpClient> clientProvider) {
    return new NetworkModule_ProvideHomeApiFactory(module, contextProvider, clientProvider);
  }

  public static HomeApi proxyProvideHomeApi(
      NetworkModule instance, Context context, OkHttpClient client) {
    return Preconditions.checkNotNull(
        instance.provideHomeApi(context, client),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
