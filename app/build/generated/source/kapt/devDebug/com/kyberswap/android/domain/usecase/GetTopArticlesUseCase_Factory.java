// Generated by Dagger (https://google.github.io/dagger).
package com.kyberswap.android.domain.usecase;

import com.kyberswap.android.domain.SchedulerProvider;
import com.kyberswap.android.domain.repository.TopArticleRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class GetTopArticlesUseCase_Factory implements Factory<GetTopArticlesUseCase> {
  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<TopArticleRepository> topArticleRepositoryProvider;

  public GetTopArticlesUseCase_Factory(
      Provider<SchedulerProvider> schedulerProvider,
      Provider<TopArticleRepository> topArticleRepositoryProvider) {
    this.schedulerProvider = schedulerProvider;
    this.topArticleRepositoryProvider = topArticleRepositoryProvider;
  }

  @Override
  public GetTopArticlesUseCase get() {
    return provideInstance(schedulerProvider, topArticleRepositoryProvider);
  }

  public static GetTopArticlesUseCase provideInstance(
      Provider<SchedulerProvider> schedulerProvider,
      Provider<TopArticleRepository> topArticleRepositoryProvider) {
    return new GetTopArticlesUseCase(schedulerProvider.get(), topArticleRepositoryProvider.get());
  }

  public static GetTopArticlesUseCase_Factory create(
      Provider<SchedulerProvider> schedulerProvider,
      Provider<TopArticleRepository> topArticleRepositoryProvider) {
    return new GetTopArticlesUseCase_Factory(schedulerProvider, topArticleRepositoryProvider);
  }

  public static GetTopArticlesUseCase newGetTopArticlesUseCase(
      SchedulerProvider schedulerProvider, TopArticleRepository topArticleRepository) {
    return new GetTopArticlesUseCase(schedulerProvider, topArticleRepository);
  }
}
