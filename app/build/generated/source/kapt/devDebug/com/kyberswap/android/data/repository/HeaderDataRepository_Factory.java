// Generated by Dagger (https://google.github.io/dagger).
package com.kyberswap.android.data.repository;

import com.kyberswap.android.data.mapper.HeaderMapper;
import com.kyberswap.android.data.repository.datasource.HeaderDataStore;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class HeaderDataRepository_Factory implements Factory<HeaderDataRepository> {
  private final Provider<HeaderDataStore> headerLocalDataSourceProvider;

  private final Provider<HeaderDataStore> headerRemoteDataSourceProvider;

  private final Provider<HeaderMapper> mapperProvider;

  public HeaderDataRepository_Factory(
      Provider<HeaderDataStore> headerLocalDataSourceProvider,
      Provider<HeaderDataStore> headerRemoteDataSourceProvider,
      Provider<HeaderMapper> mapperProvider) {
    this.headerLocalDataSourceProvider = headerLocalDataSourceProvider;
    this.headerRemoteDataSourceProvider = headerRemoteDataSourceProvider;
    this.mapperProvider = mapperProvider;
  }

  @Override
  public HeaderDataRepository get() {
    return provideInstance(
        headerLocalDataSourceProvider, headerRemoteDataSourceProvider, mapperProvider);
  }

  public static HeaderDataRepository provideInstance(
      Provider<HeaderDataStore> headerLocalDataSourceProvider,
      Provider<HeaderDataStore> headerRemoteDataSourceProvider,
      Provider<HeaderMapper> mapperProvider) {
    return new HeaderDataRepository(
        headerLocalDataSourceProvider.get(),
        headerRemoteDataSourceProvider.get(),
        mapperProvider.get());
  }

  public static HeaderDataRepository_Factory create(
      Provider<HeaderDataStore> headerLocalDataSourceProvider,
      Provider<HeaderDataStore> headerRemoteDataSourceProvider,
      Provider<HeaderMapper> mapperProvider) {
    return new HeaderDataRepository_Factory(
        headerLocalDataSourceProvider, headerRemoteDataSourceProvider, mapperProvider);
  }

  public static HeaderDataRepository newHeaderDataRepository(
      HeaderDataStore headerLocalDataSource,
      HeaderDataStore headerRemoteDataSource,
      HeaderMapper mapper) {
    return new HeaderDataRepository(headerLocalDataSource, headerRemoteDataSource, mapper);
  }
}
